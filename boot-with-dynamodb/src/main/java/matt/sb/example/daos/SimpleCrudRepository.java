package matt.sb.example.daos;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import lombok.extern.slf4j.Slf4j;
import matt.sb.example.models.UserRecord;
import org.springframework.stereotype.Component;

@Component
@Slf4j
/**
 * Implements basic CRUD operations (create, read, update, delete)
 */
public class SimpleCrudRepository {

    private final DynamoDBMapper dbMapper;

    public SimpleCrudRepository(DynamoDBMapper dbMapper) {
        this.dbMapper = dbMapper;
    }

    /**
     * Saves the record into dynamoDB. A null record will throw an IllegalArgumentException. If the record
     * is missing any keys or required fields, this will throw a DynamoDBMappingException.
     *
     * DynamoDB is capable of autogenerating keys if the key field is annotated with @DynamoDBAutogeneratedKey
     *
     * This method can also be used to replace a record completely by passing in a record with the same primary
     * and range key as the record to replace.
     *
     * The saved record is returned for chaining purposes.
     */
    public UserRecord create(UserRecord record) {
        if (record == null) {
            log.error("Attempted to create null user record");
            throw new IllegalArgumentException("Record to create cannot be null");
        }
        else {
            dbMapper.save(record);
            return record;
        }
    }

    /**
     * Retrieves a single record that matches the partition and range key passed in, or null if no record exists.
     * If either of the key parameters is null, this method will return null
     */
    public UserRecord read(String pKey, Integer rKey) {
        if (pKey == null || rKey == null) {
            return null;
        }

        return dbMapper.load(UserRecord.class, pKey, rKey);
    }

    /**
     * Updates an existing record by overwriting with any non-null fields in the parameter. If the record does not
     * already exist, this will create a new record.
     *
     * If the record parameter is null, this will throw an IllegalArgumentException.
     */
    public UserRecord update(UserRecord record) {
        if (record == null) {
            log.error("Attempted to update null user record");
            throw new IllegalArgumentException("Record to update cannot be null");
        }
        else {
            DynamoDBMapperConfig updateConfig = DynamoDBMapperConfig.builder()
                    .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES).build();
            dbMapper.save(record, updateConfig);
            return record;
        }
    }

    /**
     * Deletes an existing record. If the record parameter is null, this will throw an IllegalArgumentException.
     * If the record parameter contains a null key, this will throw a DynamoDBMappingException. If the record does
     * not exist, this method will return normally and no changes will be made in the database.
     */
    public void delete(UserRecord record) {
        if (record == null) {
            throw new IllegalArgumentException("Record to delete cannot be null");
        }
        else {
            dbMapper.delete(record);
        }
    }
}
